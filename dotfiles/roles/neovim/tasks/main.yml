# vim: se filetype=yaml.ansible
---

# - include_tasks: "packages.{{ansible_distribution|lower}}.yml"
- name: "Import OS specific vars"
  include_vars: "{{ansible_distribution|lower()|default(omit)}}.yml"

- name: "add neovim repo"
  become: true
  when: ansible_os_family|lower() == "debian" and ansible_distribution_major_version < "19"
  apt_repository:
    repo: "ppa:neovim-ppa/stable"

- name: "Update apt repo's after adding neovim PPA"
  become: true
  when: ansible_os_family|lower() == "debian"
  apt:
    update_cache: true

- name: "Install neovim and dependencies"
  package:
    name: "{{ depends }}"
    state: present
  become: true

- name: "Gem install neovim dependencies"
  gem:
    name: neovim
    state: latest
    user_install: "no"
  become: "yes"
  tags:
    - skip_ansible_lint

- name: "Ensure config & dotfiles directories exist"
  file:
    path: "{{item}}"
    state: "directory"
  with_items:
    - "{{config_base_dir}}"
    - "{{personal_code_base_dir}}"
  become_user: "{{user}}"
  become: true

- name: "Check if neovim configs are present"
  register: nvim_config_cloned
  stat:
    path: "{{personal_code_base_dir}}/nvim"

- name: "Clone Nvim config repo"
  git:
    repo: "{{nvim_repo}}"
    dest: "{{personal_code_base_dir}}/nvim"
    accept_hostkey: "yes"
    clone: "yes"
    update: "yes"
  become_user: "{{user}}"
  become: true
  tags:
    - skip_ansible_lint
  when:  nvim_config_cloned.stat.isdir is not defined

- name: "Symlink nvim configs into place"
  file:
    src: "{{personal_code_base_dir}}/nvim"
    dest: "{{config_base_dir}}/nvim"
    state: link
    # force: true
  become_user: "{{user}}"
  become: true

- name: "Pull in nvim package manager (Vim-Plug)"
  git:
    repo: "https://github.com/junegunn/vim-plug.git"
    dest: "{{personal_code_base_dir}}/vim-plug/"
    clone: "yes"
    update: "yes"
  become_user: "{{user}}"
  become: true
  tags:
    - skip_ansible_lint

- name: "Ensure nvim autoload directory exists"
  file:
    path: "{{config_base_dir}}/nvim/autoload"
    state: "directory"
  become_user: "{{user}}"
  become: true

- name: "Symlink vim-plug into autoload"
  file:
    src: "{{personal_code_base_dir}}/vim-plug/plug.vim"
    dest: "{{config_base_dir}}/nvim/autoload/plug.vim"
    state: link
    # force: true
  become_user: "{{user}}"
  become: true
  tags:
    - skip_ansible_lint

- name: "Create neovim virtualenv"
  shell: 'eval "$(pyenv init -)" && python -m venv /home/{{user}}/.local/neovim_py_venv'
  args:
    executable: "/bin/bash"
    creates: "/home/{{user}}/.local/neovim_py_venv/bin/python"
  environment: "{{env}}"
  become: "true"
  become_user: "{{user}}"

- name: "Setup neovim python library in dedicated venv."
  shell: 'eval "$(pyenv init -)" && /home/{{user}}/.local/neovim_py_venv/bin/pip install --upgrade neovim'
  args:
    executable: "/bin/bash"
    creates: "/home/{{user}}/.local/neovim_py_venv/lib/python3.8/site-packages/neovim"
  environment: "{{env}}"
  become: "true"
  become_user: "{{user}}"

- name: "Update neovim and remote plugins"
  command: "nvim --headless +PlugInstall +PlugUpdate +UpdateRemotePlugins +qall"
  tags:
    - skip_ansible_lint
  become_user: "{{user}}"
  become: true

# - name: "Symlink neomake maker recipes into neovim autoload"
#   file:
#     src: "{{personal_code_base_dir}}/nvim/plugged/neomake/autoload/neomake/makers"
#     dest: "{{personal_code_base_dir}}/nvim/autoload/makers"
#     state: link


################################################################################
############################## Linter Installs #################################
################################################################################
# TODO: Adjust this to install all the linters for all the languages Ansible supports

# - name: "Install python linters globally"
#   pip:
#     name: "{{item[2]}}"
#     virtualenv: "{{system_global_path}}/{{sys_global_pyenv_prefix}}/{{item[1]}}/{{item[2]}}"
#     virtualenv_python: "{{item[0]}}"
#     state: latest
#   with_nested:
#     - [["python3", "py3"]]
#     - ["pylint", "flake8"]
#   become: "yes"
#   # linearized (IE): python3 py3 (pylint|flake8)
#   tags:
#     - skip_ansible_lint

# - name: "Install ansible linter globally"
#   pip:
#     name: "{{item[2]}}"
#     virtualenv: "{{system_global_path}}/{{sys_global_pyenv_prefix}}/{{item[1]}}/{{item[2]}}"
#     virtualenv_python: "{{item[0]}}"
#     state: latest
#   with_nested:
#     - [["python2", "py2"]]
#     - ["ansible-lint"]
#   become: "yes"
#   tags:
#     - skip_ansible_lint

# - name: "Symlink python linters into PATH -- works for both python2 and python3"
#   file:
#     src: "{{system_global_path}}/{{sys_global_pyenv_prefix}}/{{item[0]}}/{{item[1]}}/bin/{{item[1]}}"
#     dest: "/usr/local/sbin/{{item[1]}}"
#     state: link
#     # force: true
#   with_nested:
#     - ["py3"]
#     - ["pylint", "flake8"]
#   become: "yes"
#   # linearized (IE): python3 py3 (pylint|flake8)

# - name: "Symlink ansible linters into PATH  -- only supported by python2"
#   file:
#     src: "{{system_global_path}}/{{sys_global_pyenv_prefix}}/{{item[0]}}/{{item[1]}}/bin/{{item[1]}}"
#     dest: "/usr/local/sbin/{{item[1]}}"
#     state: link
#     force: true
#   with_nested:
#     - ["py2"]
#     - ["ansible-lint"]
#   become: "yes"
